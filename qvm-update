#!/usr/bin/env python3
"""
Utility script to update Qubes domains. Attempts
to use the Salt management logic if in dom0, else
performs an apt upgrade of target template.
"""
import argparse
import time
from functools import partial
import concurrent.futures
import sys
import qubesadmin

from hexagon import qmgr

q = qubesadmin.Qubes()


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "vms", nargs="?", type=str, action="store", help="VMs to update"
    )
    parser.add_argument(
        "--dry-run",
        default=False,
        action="store_true",
        help="Don't update VMs, just display which would be updated",
    )
    args = parser.parse_args()
    return args


def updatable_vms():
    vms = [vm for vm in q.domains if vm.features.get("updates-available", False)]
    vms = [qmgr.CustomQube(vm.name) for vm in vms]
    return vms


def update_vm(vm):
    vm.update()


if __name__ == "__main__":
    args = parse_args()
    vms = args.vms
    if not vms:
        vms = updatable_vms()
    if len(vms) < 1:
        print("All VMs up to date!")
        sys.exit(0)

    if args.dry_run:
        vms_csv = ", ".join([vm.name for vm in vms])
        print("Would update: {}".format(vms_csv))
        sys.exit(0)

    n_proc = len(vms)
    executor = concurrent.futures.ThreadPoolExecutor(max_workers=n_proc)
    executor.map(update_vm, vms)
    executor.shutdown()
